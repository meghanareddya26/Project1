import java.util.*;

class Arraycalculator1{
    public static void main(String[] args)
	{
        number();
    }

    public static void number() 
	{
        Scanner in = new Scanner(System.in);
        System.out.println("Enter an arithmetic expression (with +, -, *, / and parentheses):");
        String expression = in.nextLine().replaceAll(" ", ""); 

        try
		{
            double result = evaluate(expression);
            System.out.println("Result: " + result);
        } catch (Exception e)
		{
            System.out.println("Invalid expression: " + e.getMessage());
        }

        repeat();
    }
    public static double evaluate(String expr) 
	{
        Stack<Double> values = new Stack<>();
        Stack<Character> ops = new Stack<>();
        int i = 0;

        while (i < expr.length()) 
		{
            char ch = expr.charAt(i);

            if (Character.isDigit(ch) || ch == '.')
				{
                StringBuilder sb = new StringBuilder();
                while (i < expr.length() && (Character.isDigit(expr.charAt(i)) || expr.charAt(i) == '.'))
				{
                    sb.append(expr.charAt(i));
                    i++;
                }
                values.push(Double.parseDouble(sb.toString()));
                continue;
            }

            else if (ch == '(') 
			{
                ops.push(ch);
            }

            else if (ch == ')') 
			{
                while (!ops.isEmpty() && ops.peek() != '(') 
				{
                    values.push(applyOp(ops.pop(), values.pop(), values.pop()));
                }
                if (!ops.isEmpty() && ops.peek() == '(')
                    ops.pop();
                else
                    throw new IllegalArgumentException("Mismatched parentheses");
            }

            else if (isOperator(ch)) {
                while (!ops.isEmpty() && precedence(ch) <= precedence(ops.peek())) {
                    values.push(applyOp(ops.pop(), values.pop(), values.pop()));
                }
                ops.push(ch);
            }

            i++;
        }

        while (!ops.isEmpty()) {
            values.push(applyOp(ops.pop(), values.pop(), values.pop()));
        }

        return values.pop();
    }

    public static boolean isOperator(char op) {
        return op == '+' || op == '-' || op == '*' || op == '/';
    }

    public static int precedence(char op) {
        if (op == '+' || op == '-') return 1;
        if (op == '*' || op == '/') return 2;
        return 0;
    }

    public static double applyOp(char op, double b, double a) {
        switch (op) {
            case '+': return a + b;
            case '-': return a - b;
            case '*': return a * b;
            case '/':
                if (b == 0) throw new ArithmeticException("Division by zero");
                return a / b;
        }
        return 0;
    }

    public static void repeat() {
        Scanner in = new Scanner(System.in);
        System.out.println("Do you want to perform another operation? 1: Yes  2: No");
        int choice = in.nextInt();
        in.nextLine(); 
        if (choice == 1) {
            number();
        } else {
            System.out.println("Exit");
        }
    }
}
